{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Print to console": {
		"prefix": "VuePrototypeScrollAnimation",
		"body": [
			"Vue.prototype.scrollTop = function (el, from = 0, to, duration = 500) {"
			"	if (!window.requestAnimationFrame) {"
			"		window.requestAnimationFrame = ("
			"			window.webkitRequestAnimationFrame ||"
			"			window.mozRequestAnimationFrame ||"
			"			window.msRequestAnimationFrame ||"
			"			function (callback) {"
			"				return window.setTimeout(callback, 1000 / 60);"
			"			}"
			"		);"
			"	}"
			"	const difference = Math.abs(from - to);"
			"	const step = Math.ceil(difference / duration * 50);"
			""
			"	function scroll(start, end, step) {"
			"		if (start === end) return;"
			""
			"		let d = (start + step > end) ? end : start + step;"
			"		if (start > end) {"
			"			d = (start - step < end) ? end : start - step;"
			"		}"
			"		if (el === window) {"
			"			window.scrollTo(d, d);"
			"		} else {"
			"			el.scrollTop = d;"
			"		}"
			"		window.requestAnimationFrame(() => scroll(d, end, step));"
			"	}"
			"	scroll(from, to, step);"
			"}"
		],
		"description": "scrollAnimation2"
	}
	
}